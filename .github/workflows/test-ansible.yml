name: Integration test for Ansible plays

on:
  pull_request:
    types: [opened, labeled, unlabeled, synchronize]
    branches:
      - master
      - next
    paths:
      - ansible/**
      - .github/workflows/test-ansible.yml

jobs:
  smoke:
    name: Smoketest test-tf-generation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - run: cp VERSION ansible/VERSION && rm -rf ansible/schema && cp -R validation/schema ansible
      - run: ansible-galaxy collection build -f ansible && ansible-galaxy collection install getstackhead-stackhead-* -f
      - run: ansible-playbook ./ansible/playbooks/setup-ansible.yml
      - run: ansible-playbook ./ansible/__tests__/test-tf-generation.yml
      - run: ansible-playbook ./ansible/__tests__/test-version-check.yml
      - run: ansible-playbook ./ansible/__tests__/test-constraint-check.yml

  #py-unit:
  #  name: Python Unit Tests
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v2
  #    - name: Set up Python 3
  #      uses: actions/setup-python@v2
  #      with:
  #        python-version: '3.x'
  #    - name: Install Ansible v2.10 alpha (GH actions currently uses 2.9)
  #      run: ANSIBLE_SKIP_CONFLICT_CHECK=1 pip install --user ansible==2.10.0a9 && ansible --version
  #    - run: (cd .. && python -m unittest stackhead/ansible/test/units/**/**/*.py)

  checkLabel:
    name: Please request integration test and review
    needs: smoke
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - run: if [ ${{ contains( github.event.pull_request.labels.*.name, 'action/integration-test') }} == false ]; then exit 1; else exit 0; fi
  test:
    name: Integration Test
    needs: checkLabel
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        webserver: ['nginx']
      fail-fast: false
    env:
      INVENTORY_PATH: ansible/__tests__/inventory.yml
      DOMAIN: pr-${{ github.run_id }}-${{ matrix.webserver }}.test.stackhead.io
      WEBSERVER: ${{ matrix.webserver }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install Ansible v2.10 alpha (GH actions currently uses 2.9)
      run: ANSIBLE_SKIP_CONFLICT_CHECK=1 pip install --user ansible==2.10.0a9 && ansible --version
    - name: Print Ansible version
      run: ansible --version
    - uses: webfactory/ssh-agent@v0.4.1
      with:
        ssh-private-key: "${{ secrets.SSH_PRIVATE_KEY }}"
    - name: Setup Hetzner server
      id: setup_server
      uses: saitho/hetzner-cloud-action@v1.1.0
      with:
        action: create
        server_name: "pr-${{ github.run_id }}-${{ matrix.webserver }}"
        server_image: ubuntu-18.04
        server_location: fsn1
        server_ssh_key_name: gh-actions
        wait_for_ssh: 1
      env:
        API_TOKEN: ${{ secrets.HETZNER_TOKEN }}
    - name: Add DNS record
      uses: saitho/create-dns-record@patch-1
      with:
        type: "A"
        name: "${{ env.DOMAIN }}"
        content: "${{ steps.setup_server.outputs.hcloud_server_created_ipv4 }}"
        ttl: 1
        proxied: 0
        token: "${{ secrets.CLOUDFLARE_TOKEN }}"
        zone: "${{ secrets.CLOUDFLARE_ZONE }}"
    - name: Add DNS record for subdomain
      uses: saitho/create-dns-record@patch-1
      with:
        type: "A"
        name: "sub.${{ env.DOMAIN }}"
        content: "${{ steps.setup_server.outputs.hcloud_server_created_ipv4 }}"
        ttl: 1
        proxied: 0
        token: "${{ secrets.CLOUDFLARE_TOKEN }}"
        zone: "${{ secrets.CLOUDFLARE_ZONE }}"
    - name: Perform integration test
      uses: ./
      with:
        ipaddress: ${{ steps.setup_server.outputs.hcloud_server_created_ipv4 }}
        domain: '${{ env.DOMAIN }}'
        domain2: 'sub.${{ env.DOMAIN }}'
        webserver: 'getstackhead.stackhead_webserver_nginx' # use nginx
        selftest: '1'
    #- name: Setup tmate session
    #  uses: mxschmitt/action-tmate@v3
    #  if: always()
    - name: PR comment if integration stage was left intact
      uses: mshick/add-pr-comment@v1
      if: always() && contains( github.event.pull_request.labels.*.name, 'action/keep-integration-stage')
      with:
        message: |
          Because the `action/keep-integration-stage` label was set, the integration stage is left intact.
          You may now continue debugging on it, if you had been granted SSH access.

          IP-Address: ${{ steps.setup_server.outputs.hcloud_server_created_ipv4 }}

          ## Quick command reference

          ### Build

          ```bash
          INPUT_IPADDRESS=${{ steps.setup_server.outputs.hcloud_server_created_ipv4 }} INPUT_DOMAIN=${{ env.DOMAIN }} INPUT_DOMAIN2=sub.${{ env.DOMAIN }} INPUT_WEBSERVER=getstackhead.stackhead_webserver_nginx INPUT_CONTAINER=getstackhead.stackhead_container_docker INPUT_SELFTEST=1 GITHUB_ACTION_PATH=. GITHUB_WORKSPACE=. ./ansible/__tests__/steps/build.sh
          ```

          ### Setup server

          ```bash
          INPUT_IPADDRESS=${{ steps.setup_server.outputs.hcloud_server_created_ipv4 }} INPUT_DOMAIN=${{ env.DOMAIN }} INPUT_DOMAIN2=sub.${{ env.DOMAIN }} INPUT_WEBSERVER=getstackhead.stackhead_webserver_nginx INPUT_CONTAINER=getstackhead.stackhead_container_docker INPUT_SELFTEST=1 GITHUB_ACTION_PATH=. GITHUB_WORKSPACE=. ./ansible/__tests__/steps/setup.sh
          ```

          ### Deploy application

          ```bash
          INPUT_IPADDRESS=${{ steps.setup_server.outputs.hcloud_server_created_ipv4 }} INPUT_DOMAIN=${{ env.DOMAIN }} INPUT_DOMAIN2=sub.${{ env.DOMAIN }} INPUT_WEBSERVER=getstackhead.stackhead_webserver_nginx INPUT_CONTAINER=getstackhead.stackhead_container_docker INPUT_SELFTEST=1 GITHUB_ACTION_PATH=. GITHUB_WORKSPACE=. ./ansible/__tests__/steps/deploy.sh
          ```

          ### Validate application

          ```bash
          INPUT_IPADDRESS=${{ steps.setup_server.outputs.hcloud_server_created_ipv4 }} INPUT_DOMAIN=${{ env.DOMAIN }} INPUT_DOMAIN2=sub.${{ env.DOMAIN }} INPUT_WEBSERVER=getstackhead.stackhead_webserver_nginx INPUT_CONTAINER=getstackhead.stackhead_container_docker INPUT_SELFTEST=1 GITHUB_ACTION_PATH=. GITHUB_WORKSPACE=. ./ansible/__tests__/steps/validate.sh
          ```

          ### Destroy application

          ```bash
          INPUT_IPADDRESS=${{ steps.setup_server.outputs.hcloud_server_created_ipv4 }} INPUT_DOMAIN=${{ env.DOMAIN }} INPUT_DOMAIN2=sub.${{ env.DOMAIN }} INPUT_WEBSERVER=getstackhead.stackhead_webserver_nginx INPUT_CONTAINER=getstackhead.stackhead_container_docker INPUT_SELFTEST=1 GITHUB_ACTION_PATH=. GITHUB_WORKSPACE=. ./ansible/__tests__/steps/destroy.sh
          ```

          ## Done debugging?

          Destroy the stage by deleting the server in the Hetzner control panel and the DNS setting in the Cloudflare control panel.
        repo-token: ${{ secrets.GH_TOKEN }}
        allow-repeats: false
    - name: Remove DNS record
      uses: saitho/delete-dns-record@saitho-patch-1
      if: always() && !contains( github.event.pull_request.labels.*.name, 'action/keep-integration-stage')
      with:
        name: "${{ env.DOMAIN }}"
        token: "${{ secrets.CLOUDFLARE_TOKEN }}"
        zone: "${{ secrets.CLOUDFLARE_ZONE }}"
    - name: Remove DNS record for subdomain
      uses: saitho/delete-dns-record@saitho-patch-1
      if: always() && !contains( github.event.pull_request.labels.*.name, 'action/keep-integration-stage')
      with:
        name: "sub.${{ env.DOMAIN }}"
        token: "${{ secrets.CLOUDFLARE_TOKEN }}"
        zone: "${{ secrets.CLOUDFLARE_ZONE }}"
    - name: Remove Hetzner server
      uses: saitho/hetzner-cloud-action@v1.1.0
      if: always() && !contains( github.event.pull_request.labels.*.name, 'action/keep-integration-stage')
      with:
        action: remove
        server_id: "${{ steps.setup_server.outputs.hcloud_server_id }}"
      env:
        API_TOKEN: ${{ secrets.HETZNER_TOKEN }}
