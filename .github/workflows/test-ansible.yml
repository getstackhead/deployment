name: Integration test for Ansible plays

on:
  pull_request:
    types: [opened, labeled, unlabeled, synchronize]
    branches:
      - master
      - next
    paths:
      - ansible/**
      - .github/workflows/test-ansible.yml

jobs:
  smoke:
    name: Smoketest test-tf-generation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: rm -rf ansible/schema && cp -R validation/schema ansible && ansible-galaxy collection build -f ansible && ansible-galaxy collection install getstackhead-stackhead-* -f
      - run: ansible-playbook ./ansible/__tests__/test-tf-generation.yml

  checkLabel:
    name: Please request integration test and review
    needs: smoke
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - run: if [ ${{ contains( github.event.pull_request.labels.*.name, 'action/integration-test') }} == false ]; then exit 1; else exit 0; fi
  test:
    name: Integration Test
    needs: checkLabel
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        webserver: ['nginx']
      fail-fast: false
    env:
      INVENTORY_PATH: ansible/__tests__/inventory.yml
      DOMAIN: pr-${{ github.run_id }}-${{ matrix.webserver }}.test.stackhead.io
      WEBSERVER: ${{ matrix.webserver }}
    steps:
    - uses: actions/checkout@v2
    - name: Print Ansible version
      run: ansible --version
    - uses: webfactory/ssh-agent@v0.2.0
      with:
        ssh-private-key: "${{ secrets.SSH_PRIVATE_KEY }}"
    - name: Setup Hetzner server
      id: setup_server
      uses: saitho/hetzner-cloud-action@v1.1.0
      with:
        action: create
        server_name: "pr-${{ github.run_id }}-${{ matrix.webserver }}"
        server_image: ubuntu-18.04
        server_location: fsn1
        server_ssh_key_name: gh-actions
        wait_for_ssh: 1
      env:
        API_TOKEN: ${{ secrets.HETZNER_TOKEN }}
    - name: Add DNS record
      uses: saitho/create-dns-record@patch-1
      with:
        type: "A"
        name: "${{ env.DOMAIN }}"
        content: "${{ steps.setup_server.outputs.hcloud_server_created_ipv4 }}"
        ttl: 1
        proxied: 0
        token: "${{ secrets.CLOUDFLARE_TOKEN }}"
        zone: "${{ secrets.CLOUDFLARE_ZONE }}"
    - name: Add DNS record for subdomain
      uses: saitho/create-dns-record@patch-1
      with:
        type: "A"
        name: "sub.${{ env.DOMAIN }}"
        content: "${{ steps.setup_server.outputs.hcloud_server_created_ipv4 }}"
        ttl: 1
        proxied: 0
        token: "${{ secrets.CLOUDFLARE_TOKEN }}"
        zone: "${{ secrets.CLOUDFLARE_ZONE }}"
    - name: Perform integration test
      uses: ./
      with:
        ipaddress: ${{ steps.setup_server.outputs.hcloud_server_created_ipv4 }}
        domain: '${{ env.DOMAIN }}'
        domain2: 'sub.${{ env.DOMAIN }}'
        webserver: 'getstackhead.stackhead_webserver_nginx' # use nginx
        selftest: '1'
    #- uses: mxschmitt/action-tmate@v2
    #  if: always() && matrix.webserver == 'caddy'
    - name: Remove DNS record
      uses: saitho/delete-dns-record@saitho-patch-1
      if: always()
      with:
        name: "${{ env.DOMAIN }}"
        token: "${{ secrets.CLOUDFLARE_TOKEN }}"
        zone: "${{ secrets.CLOUDFLARE_ZONE }}"
    - name: Remove DNS record for subdomain
      uses: saitho/delete-dns-record@saitho-patch-1
      if: always()
      with:
        name: "sub.${{ env.DOMAIN }}"
        token: "${{ secrets.CLOUDFLARE_TOKEN }}"
        zone: "${{ secrets.CLOUDFLARE_ZONE }}"
    - name: Remove Hetzner server
      uses: saitho/hetzner-cloud-action@v1.1.0
      if: always()
      with:
        action: remove
        server_id: "${{ steps.setup_server.outputs.hcloud_server_id }}"
      env:
        API_TOKEN: ${{ secrets.HETZNER_TOKEN }}
