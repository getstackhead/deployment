---
- assert:
    name: replace-provider task must only be called in migration context!
    that:
      - stackhead_migration_context|default(0) == 1
- name: "Check if tfstate exists"
  stat:
    path: "{{ item }}/terraform.tfstate"
  register: tfstate_exist
- block:
    - include_tasks: "../roles/stackhead_module_api/tasks_internal/terraform.yml"
    # add old provider back to list and regenerate providers
    - set_fact:
        initial_loaded_terraform_providers: "{{ loaded_terraform_providers }}"
        loaded_terraform_providers: "{{ loaded_terraform_providers|default([]) + [{'vendor': provider_old.split('/').0, 'name': provider_old.split('/').1, 'version': provider_old_version, 'nameSuffix': 'oldprovider'}] }}"
    - include_tasks: "../roles/config_terraform/tasks/generate-providers.yml"
    - include_tasks: "../roles/config_terraform/tasks/execute.yml"

    - name: "Replace Terraform provider {{ provider_old }} -> {{ provider_new }}"
      shell:
        cmd: "terraform state replace-provider -auto-approve '{{ provider_old }}' '{{ provider_new }}'"
        chdir: "{{ item }}"

    # Regenerate used providers
    - set_fact:
        loaded_terraform_providers: "{{ initial_loaded_terraform_providers }}"
    - include_tasks: "../roles/config_terraform/tasks/generate-providers.yml"
    - include_tasks: "../roles/config_terraform/tasks/execute.yml"
  when: tfstate_exist.stat.exists
