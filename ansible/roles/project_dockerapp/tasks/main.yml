---
- block:
  - name: "StackHead::Docker || Check if project directory exists | Project: {{ dockerapp__project_name }}"
    stat:
      path: "{{ dockerapp__project_src }}"
    register: project_folder
  - name: "StackHead::Docker || Create project directory if not exists | Project: {{ dockerapp__project_name }}"
    file:
      path: "{{ dockerapp__project_src }}"
      state: directory
    when: project_folder.stat.exists == false

- block:
  - name: "StackHead::Docker || Build src folder list || Project: {{ dockerapp__project_name }}"
    block:
      - name: "Collect local volumes"
        set_fact:
          managedDockerVolumePaths: "{{ managedDockerVolumePaths|default([]) + [ ''~ dockerapp__data_location_services|format(item.0.name, item.1.src|default()) ~'' ] }}"
        when: item.1.type == 'local'
        with_subelements:
          - "{{ dockerapp__services }}"
          - volumes
          - flags:
            skip_missing: True
      - name: "Collect global volumes"
        set_fact:
          managedDockerVolumePaths: "{{ managedDockerVolumePaths|default([]) + [ '' ~ dockerapp__data_location_global|format(item.1.src|default()) ~ '' ] }}"
        when: item.1.type == 'global'
        with_subelements:
          - "{{ dockerapp__services }}"
          - volumes
          - flags:
            skip_missing: True
      - name: "Collect custom volumes"
        set_fact:
          managedDockerVolumePaths: "{{ managedDockerVolumePaths|default([]) + [ '' ~ item.1.src ~ '' ] }}"
        when: item.1.type == 'custom'
        with_subelements:
          - "{{ dockerapp__services }}"
          - volumes
          - flags:
            skip_missing: True
  - name: "StackHead::Docker || Authenticate with Docker registries || Project: {{ dockerapp__project_name }}"
    docker_login:
      username: "{{ item.username }}"
      password: "{{ item.password }}"
      url: "{{ item.url | default('https://index.docker.io/v1/') }}"
      reauthorize: yes
    with_items: "{{ dockerapp__registries }}"
  - name: "StackHead::Docker || Pull required images || Project: {{ dockerapp__project_name }}"
    docker_image:
      name: "{{ item.image }}"
      source: pull
      force_source: yes
    with_items: "{{ dockerapp__services }}"
    vars:
      ansible_python_interpreter: "/usr/bin/env python-docker"
  - block:
      - name: "StackHead::Docker || Checking volume folders"
        stat:
          path: "{{ item }}"
        register: folder_stats
        with_items: "{{ managedDockerVolumePaths }}"
      - name: "StackHead::Docker || Creating missing volume folders"
        file:
          path: "{{ item.item }}"
          state: directory
          mode: 0755
        when: item.stat.exists == false
        with_items: "{{ folder_stats.results }}"
    when: managedDockerVolumePaths is defined

- block:
  - name: "StackHead::Docker || Tear down existing services | Project: {{ dockerapp__project_name }}"
    docker_compose:
      project_src: "{{ dockerapp__project_src }}"
      state: absent
      files:
        - docker-compose.base.yml
        - docker-compose.volumes.yml
    ignore_errors: yes
    vars:
      ansible_python_interpreter: "/usr/bin/env python-docker"

  - block:
      - name: "StackHead::Docker || Generate docker-compose volumes file | Project: {{ dockerapp__project_name }}"
        template:
          src: "templates/docker-compose.base.yml.j2"
          dest: "{{ dockerapp__project_src }}/docker-compose.base.yml"
          force: true
        tags:
          - template
      - name: "StackHead::Docker || Generate docker-compose base file | Project: {{ dockerapp__project_name }}"
        template:
          src: "templates/docker-compose.volumes.yml.j2"
          dest: "{{ dockerapp__project_src }}/docker-compose.volumes.yml"
          force: true
        tags:
          - template

  - name: "StackHead::Docker || Create and start services | Project: {{ dockerapp__project_name }}"
    docker_compose:
      project_src: "{{ dockerapp__project_src }}"
      files:
        - docker-compose.base.yml
        - docker-compose.volumes.yml
    vars:
      ansible_python_interpreter: "/usr/bin/env python-docker"
  when: dockerapp__file_changed == true

# Always fetch port - required for Nginx config update when domain changed
- block:
  - name: "StackHead::Docker || Get current Docker port"
    shell: "docker port stackhead-{{ project_name }}-{{ item.name }} {{ dockerapp__expose.port }}"
    when: dockerapp__expose is defined and item.name == dockerapp__expose.service
    with_items: "{{ dockerapp__services }}"
    register: used_port

  - set_fact:
      docker_port: "{{ item.stdout | replace('0.0.0.0:','') }}"
    when: item.changed == true
    with_items: "{{ used_port.results }}"
