node default {
  include stackhead
  include docker

{% for domainConfig in app_config.domains if domainConfig.expose is defined %}
{% for expose in domainConfig.expose if expose.internal_port is defined and expose.external_port != 443 %}
  stackhead::nginx::ssl_proxy { '{{ domainConfig.domain }}-{{ expose.external_port }}':
    server_name => '{{ domainConfig.domain }}',
    ssl_cert => '{{ stackhead__certificates_project_folder }}/fullchain.pem',
    ssl_key => '{{ stackhead__certificates_project_folder }}/privkey.pem',
    listen_port => '{{ expose.external_port }}',
    proxy_port => '{{ expose.internal_port }}',
  }
{% endfor %}
{% endfor %}

  # Network
  docker_network { 'stackhead-network-{{ containerapp__project_name }}':
    ensure   => present,
  }

{%- set globalVolumeKeys = [] %}
{% for service in containerapp__services if service.volumes is defined %}
  {% for volume in service.volumes %}
  {%- set src = volume.src|default('') %}
  {%- set sanitizedSrc = src | regex_replace('[^\w]', '_') %}
  {% if volume.type == "local" %}
  docker_volume { 'local-{{ containerapp__project_name }}-{{ service.name }}-{{ sanitizedSrc }}':
    ensure  => present,
    driver  => 'local',
    options => ['type=none','o=bind','device={{ containerapp__data_location_services|format(service.name, src) }}']
  }
    {% elif volume.type == "global" and sanitizedSrc not in globalVolumeKeys %}
  docker_volume { 'global-{{ containerapp__project_name }}-{{ sanitizedSrc }}':
    ensure  => present,
    driver  => 'local',
    options => ['type=none','o=bind','device={{ containerapp__data_location_global|format(src) }}']
  }
  {%- set _ = globalVolumeKeys.append( sanitizedSrc ) %}
  {% endif %}
  {% endfor %}
{% endfor %}

{% for service in containerapp__services %}
  docker::run { '{{ service.name }}':
    image            => '{{ service.image }}',
    detach           => true,
    service_prefix   => 'stackhead-{{ containerapp__project_name }}-',
    restart_service  => true,
    pull_on_start    => true,

    {%- set ns = namespace (exposedPorts = []) %}
    {%- for domainConfig in app_config.domains if domainConfig.expose is defined %}
      {%- for expose in domainConfig.expose if expose.internal_port is defined and expose.service == service.name %}
      {%- set ns.exposedPorts = ns.exposedPorts|default([]) + [expose.internal_port|string] %}
      {%- endfor %}
    {%- endfor %}

    #ports            => ['4444', '4555'],
    expose           => {{ ns.exposedPorts }}, # todo: check if expose is sufficient
    #links            => ['mysql:db'], # todo: should not be needed as services should connect to network automatically
    net              => ['stackhead-network-{{ containerapp__project_name }}'],

    {% if 'volumes' in service %}volumes          => {{ service|containerVolumes(containerapp__project_name) }},{% endif %}

    {% if 'volumes_from' in service %}volumes_from     => '{{ service.volumes_from.0 }}',{% endif %}

  }
{% endfor %}
}