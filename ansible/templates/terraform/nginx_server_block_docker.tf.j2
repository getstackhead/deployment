#jinja2: trim_blocks:False
resource "nginx_server_block" "nginx-{{ project_name }}" {
  filename = "{{ project_name }}.conf"
  enable = true

  configurations = [
    {% for domainConfig in app_config.domains %}
    {%- if not loop.first %},{% endif %}{
      listen = 80
      server_name = "{{ domainConfig.domain }}"

      forward_acme = "{{ stackhead__acme_folder }}/{{ nginx_servername }}"

      locations = [
        {
          path = "/"
          return = "301 https://{{ domainConfig.domain }}$request_uri;"
          {%- if domainConfig.security.authentication is defined and domainConfig.security.authentication|selectattr("type", "equalto", "basic")|list | length > 0 %}
          auth_basic = "{{ nginx_basicauth_title }}"
          auth_basic_user_file = "{{ nginx_htpasswd_path }}/.{{ domainConfig.domain }}"
          {% endif %}
        }
      ]
    },
    {
      listen = 443
      server_name = "{{ domainConfig.domain }}"
      locations = [
        {
          path = "/"
          root = "{{ nativeapp__remote_path }}/{{ domainConfig.public_path }}"
          {% if nginx_use_php is defined %}
          index = "index.php index.html index.htm"
          use_php_version = "{{ php_version }}"
          {% endif %}
          {% if domainConfig.security.authentication is defined and domainConfig.security.authentication|selectattr("type", "equalto", "basic")|list | length > 0 %}
          auth_basic = "{{ nginx_basicauth_title }}"
          auth_basic_user_file = "{{ nginx_htpasswd_path }}/.{{ domainConfig.domain }}"
          {% endif %}
        }
      ]
    }
    {% endfor %}
  ]

{%- set all_ports = containerapp__expose|containerPorts(project_name) %}
  markers = {
    docker_ports = "{{ all_ports|map(attribute='tfstring')|join(',') }}"
  }
  markers_split = {
    docker_ports = ","
  }

  content = <<EOF
{%- set ns = namespace (domainCfg = {}) %}
{%- for domainConfig in app_config.domains %}
{%- set ns.domainCfg = domainConfig %}
{%- for nginx_expose in domainConfig.expose if nginx_expose.external_port != 443 %}
{% set port_index = all_ports|selectattr('service', 'equalto', nginx_expose.service)|selectattr('internal_port', 'equalto', nginx_expose.internal_port)|map(attribute='index')|first %}
{% if nginx_expose.external_port == 80 %}
{{ lookup('template', "{{ stackhead__templates }}/nginx/serverblock.http.j2", template_vars=dict(domainConfig=ns.domainCfg)) }}
{{ lookup('template', "{{ stackhead__templates }}/nginx/serverblock.container-reverseproxy.j2", template_vars=dict(port_index=port_index,domainConfig=ns.domainCfg)) }}
{% else %}
{{ lookup('template', "{{ stackhead__templates }}/nginx/serverblock.container-reverseproxy.j2", template_vars=dict(port_index=port_index,port=nginx_expose.external_port,domainConfig=ns.domainCfg)) }}
{% endif %}
{%- endfor %}
{%- endfor %}
EOF

{%- if nginx_expose is defined and nginx_expose.service is defined %}
  depends_on = [
{% for nginx_expose in containerapp__expose if nginx_expose.external_port != 443 %}
{% if not loop.first %},{% endif %}docker_container.stackhead-{{ project_name }}-{{ nginx_expose.service }}
{% endfor %}
  ]
{%- endif %}

  provisioner "local-exec" {
    # Symlink project certificate files to snakeoil files after initial creation
    command = <<EOT
            ln -s {{ stackhead__snakeoil_fullchain }} {{ stackhead__certificates_project_folder }}/fullchain.pem || true &&
            ln -s {{ stackhead__snakeoil_privkey }} {{ stackhead__certificates_project_folder }}/privkey.pem || true &&
            sudo systemctl reload nginx
EOT
  }
  provisioner "local-exec" {
    when = destroy
    command = "sudo systemctl reload nginx"
  }
}